"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Leaderboard = void 0;
const discord_js_1 = require("discord.js");
const monthlyChallenge_1 = require("../db/monthlyChallenge");
const canvas_1 = require("canvas");
const promiseWrapper_1 = require("../db/promiseWrapper");
const main_1 = require("../main");
const lodash_1 = require("lodash");
const colors = ["#FF0000", "#8D8000", "#66AA00", "#40D500", "#1AFF00"].reverse();
class Leaderboard {
    async init(challenge) {
        this.challenge = challenge;
        this.channel = await main_1.client.bot.channels.fetch(this.challenge.LeaderBoardChannel);
        this.image = await (0, canvas_1.loadImage)("src/assets/template.png");
    }
    async getMembers() {
        const entries = await this.getEntries();
        const members = await main_1.client.mainGuild.members.fetch({ user: entries.keyArray() });
        const rankedMembers = members.mapValues(member => {
            const entry = entries.get(member.id);
            const rankedUser = member;
            rankedUser.points = entry;
            return rankedUser;
        });
        return rankedMembers.sort((member1, member2) => member2.points - member1.points);
    }
    async generateImage() {
        const canvases = await this.mapMembers();
        const attachments = canvases.map((canvas, i) => {
            return new discord_js_1.MessageAttachment(canvas.toBuffer(), `page${i + 1}.jpg`);
        });
        return attachments;
    }
    async getEntries() {
        const users = new discord_js_1.Collection();
        const challengeEntries = await (0, promiseWrapper_1.dbAll)(`SELECT * FROM ChallengeEntry WHERE ChallengeID=$ChallengeID`, { $ChallengeID: this.challenge.ID });
        await Promise.all(challengeEntries.map(async (challengeEntry) => {
            const dayEntry = await (0, promiseWrapper_1.dbAll)(`SELECT * FROM DayEntry WHERE EntryID=$EntryID`, { $EntryID: challengeEntry.ID });
            await Promise.all(dayEntry.map(async (entry) => {
                const rate = await (0, monthlyChallenge_1.getConversionRate)(`${entry.ValueType}-${this.challenge.ID}`);
                let previousXP = users.get(challengeEntry.DiscordID) || 0;
                users.set(challengeEntry.DiscordID, previousXP + (entry.Value * rate));
            }));
        }));
        users.forEach((value, key) => users.set(key, Math.floor(value)));
        return users;
    }
    async mapMembers() {
        const canvases = [];
        const members = await this.getMembers();
        const chunks = (0, lodash_1.chunk)(Array.from(members.values()), 6);
        let rank = 1;
        const bronzeRatio = this.challenge.BronzeCutoff / this.challenge.Goal;
        const silverRatio = this.challenge.SilverCutoff / this.challenge.Goal;
        const goldRatio = this.challenge.GoldCutoff / this.challenge.Goal;
        const bronzeX = 5 + (bronzeRatio * this.image.width - 10);
        const silverX = 5 + (silverRatio * this.image.width - 10);
        const goldX = 5 + (goldRatio * this.image.width - 10);
        for (let i = 0; i < chunks.length; i++) {
            let y = 1;
            const canvas = (0, canvas_1.createCanvas)(983, 800);
            const ctx = canvas.getContext('2d');
            ctx.drawImage(this.image, 0, 0, this.image.width, this.image.height);
            for (let j = 0; j < chunks[i].length; j++) {
                const member = chunks[i][j];
                ctx.fillStyle = '#ffffff';
                ctx.font = "40px Arial";
                //progress bar
                ctx.fillStyle = colors[Math.min(colors.length - 1, rank - 1)];
                ctx.fillRect(5, 70 * y, (member.points / this.challenge.Goal) * this.image.width, 55);
                if (member.points < this.challenge.BronzeCutoff) {
                    //fill bronze
                    ctx.fillStyle = '#CD7F32';
                    ctx.fillRect(bronzeX, 70 * y, 5, 55);
                    //fill silver
                    ctx.fillStyle = '#C0C0C0';
                    ctx.fillRect(silverX, 70 * y, 5, 55);
                    //fill gold
                    ctx.fillStyle = '#FFD700';
                    ctx.fillRect(goldX, 70 * y, 5, 55);
                    ctx.fillStyle = '#ffffff';
                }
                if (member.points >= this.challenge.BronzeCutoff && member.points < this.challenge.SilverCutoff) {
                    //fill silver
                    ctx.fillStyle = '#C0C0C0';
                    ctx.fillRect(silverX, 70 * y, 5, 55);
                    //fill gold
                    ctx.fillStyle = '#FFD700';
                    ctx.fillRect(goldX, 70 * y, 5, 55);
                    ctx.fillStyle = '#CD7F32';
                }
                if (member.points >= this.challenge.SilverCutoff && member.points < this.challenge.GoldCutoff) {
                    //fill gold
                    ctx.fillStyle = '#FFD700';
                    ctx.fillRect(goldX, 70 * y, 5, 55);
                    ctx.fillStyle = '#C0C0C0';
                }
                if (member.points >= this.challenge.GoldCutoff) {
                    ctx.fillStyle = '#FFD700';
                }
                ctx.fillText(`${member.user.username} #${rank} - ${member.points} / ${this.challenge.Goal}`, 5, 50 + (j * 130), this.image.width - 200);
                y += 1.85;
                rank++;
            }
            canvases.push(canvas);
        }
        return canvases;
    }
}
exports.Leaderboard = Leaderboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGVhZGVyYm9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJuYWxzL0xlYWRlcmJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUFnRztBQUNoRyw2REFBZ0c7QUFDaEcsbUNBQWdFO0FBQ2hFLHlEQUE2QztBQUM3QyxrQ0FBaUM7QUFDakMsbUNBQStCO0FBRS9CLE1BQU0sTUFBTSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBTWhGLE1BQWEsV0FBVztJQU1iLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBb0I7UUFFbEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLGFBQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFnQixDQUFDO1FBQ2pHLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxJQUFBLGtCQUFTLEVBQUMseUJBQXlCLENBQUMsQ0FBQztJQUU1RCxDQUFDO0lBRU8sS0FBSyxDQUFDLFVBQVU7UUFFcEIsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7UUFDdkMsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNsRixNQUFNLGFBQWEsR0FBc0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUVoRixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNwQyxNQUFNLFVBQVUsR0FBZSxN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